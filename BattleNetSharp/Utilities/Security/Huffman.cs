using System;

namespace Utilities.Security
{
	// Token: 0x020007B7 RID: 1975
	public static class Huffman
	{
		// Token: 0x0600B4DB RID: 46299 RVA: 0x002C0E50 File Offset: 0x002BF050
		public static byte[] Decompress(byte[] input)
		{
			int num = input.Length;
			byte[] array = new byte[1024];
			uint num2 = 0U;
			uint num3 = 0U;
			uint num4 = (uint)array.Length;
			int num5 = 0;
			uint num6 = 32U;
			for (;;)
			{
				bool flag = num6 >= 8U;
				uint num7;
				if (flag)
				{
					while (num > 0 && num6 >= 8U)
					{
						num6 -= 8U;
						num--;
						num7 = (uint)((uint)input[(int)num3++] << (int)num6);
						num2 |= num7;
					}
				}
				uint num8 = Huffman.IndexTable[(int)(num2 >> 24)];
				num7 = (uint)Huffman.CharacterTable[(int)num8];
				uint num9 = (num2 >> (int)(24U - num7)) & Huffman.BitMasks[(int)num7];
				byte b = Huffman.CharacterTable[(int)(num8 + 2U * num9 + 2U)];
				num6 += (uint)b;
				bool flag2 = num6 > 32U;
				if (flag2)
				{
					break;
				}
				num4 -= 1U;
				bool flag3 = num4 == 0U;
				if (flag3)
				{
					Array.Resize<byte>(ref array, array.Length * 2);
				}
				num7 = (uint)Huffman.CharacterTable[(int)(num8 + 2U * num9 + 1U)];
				array[num5++] = (byte)num7;
				num2 <<= (int)(b & byte.MaxValue);
			}
			uint num10 = (uint)(array.Length - (int)num4);
			byte[] array2 = new byte[num10];
			Array.Copy(array, array2, (long)((ulong)num10));
			return array2;
		}

		// Token: 0x0600B4DC RID: 46300 RVA: 0x002C0F94 File Offset: 0x002BF194
		public static uint Compress(byte[] input, out byte[] output)
		{
			uint num = 0U;
			int i = 0;
			int j = input.Length;
			int num2 = 0;
			int num3 = 0;
			output = new byte[input.Length];
			while (j != 0)
			{
				uint num4 = Huffman.CompressionTable[(int)input[num2++]];
				j--;
				uint num5 = (num4 & 65280U) >> 8;
				num |= num4 >> 24 << 24 - i;
				i += (int)((num4 & 16711680U) >> 16);
				bool flag = num5 > 0U;
				if (flag)
				{
					num |= (num4 & 255U) << (int)(8U - num5) << 24 - i;
					i += (int)num5;
				}
				while (i > 8)
				{
					output[num3++] = (byte)(num >> 24);
					i -= 8;
					num <<= 8;
				}
			}
			while (i > 0)
			{
				output[num3++] = (byte)(num >> 24);
				num <<= 8;
				i -= 8;
			}
			return (uint)num3;
		}

		// Token: 0x04005982 RID: 22914
		private static readonly uint[] IndexTable = new uint[]
		{
			583U, 566U, 549U, 532U, 515U, 498U, 481U, 464U, 447U, 430U,
			413U, 396U, 379U, 362U, 353U, 344U, 335U, 326U, 317U, 308U,
			299U, 290U, 281U, 272U, 263U, 254U, 245U, 236U, 227U, 218U,
			209U, 200U, 191U, 182U, 173U, 168U, 163U, 158U, 153U, 148U,
			143U, 138U, 133U, 128U, 123U, 118U, 113U, 108U, 105U, 102U,
			99U, 96U, 93U, 90U, 87U, 84U, 81U, 78U, 75U, 72U,
			69U, 66U, 63U, 63U, 60U, 60U, 57U, 57U, 54U, 54U,
			51U, 51U, 48U, 48U, 45U, 45U, 42U, 42U, 39U, 39U,
			36U, 36U, 33U, 33U, 30U, 30U, 27U, 27U, 24U, 24U,
			21U, 21U, 18U, 18U, 18U, 18U, 15U, 15U, 15U, 15U,
			12U, 12U, 12U, 12U, 9U, 9U, 9U, 9U, 6U, 6U,
			6U, 6U, 3U, 3U, 3U, 3U, 3U, 3U, 3U, 3U,
			3U, 3U, 3U, 3U, 3U, 3U, 3U, 3U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U,
			0U, 0U, 0U, 0U, 0U, 0U
		};

		// Token: 0x04005983 RID: 22915
		private static readonly byte[] CharacterTable = new byte[]
		{
			0, 0, 1, 0, 1, 4, 0, byte.MaxValue, 6, 0,
			20, 6, 0, 19, 6, 0, 5, 6, 0, 2,
			6, 0, 128, 7, 0, 109, 7, 0, 105, 7,
			0, 104, 7, 0, 103, 7, 0, 30, 7, 0,
			21, 7, 0, 18, 7, 0, 13, 7, 0, 10,
			7, 0, 8, 7, 0, 7, 7, 0, 6, 7,
			0, 4, 7, 0, 3, 7, 0, 108, 8, 0,
			81, 8, 0, 32, 8, 0, 31, 8, 0, 29,
			8, 0, 24, 8, 0, 23, 8, 0, 22, 8,
			0, 17, 8, 0, 16, 8, 0, 15, 8, 0,
			12, 8, 0, 11, 8, 0, 9, 8, 1, 150,
			9, 151, 9, 1, 144, 9, 149, 9, 1, 100,
			9, 107, 9, 1, 98, 9, 99, 9, 1, 86,
			9, 88, 9, 1, 82, 9, 85, 9, 1, 77,
			9, 80, 9, 1, 69, 9, 76, 9, 1, 64,
			9, 67, 9, 1, 49, 9, 59, 9, 1, 40,
			9, 48, 9, 1, 26, 9, 37, 9, 1, 14,
			9, 25, 9, 2, 226, 10, 232, 10, 240, 10,
			248, 10, 2, 192, 10, 194, 10, 206, 10, 224,
			10, 2, 160, 10, 162, 10, 176, 10, 184, 10,
			2, 138, 10, 143, 10, 147, 10, 152, 10, 2,
			129, 10, 130, 10, 131, 10, 137, 10, 2, 124,
			10, 125, 10, 126, 10, 127, 10, 2, 119, 10,
			120, 10, 121, 10, 122, 10, 2, 115, 10, 116,
			10, 117, 10, 118, 10, 2, 110, 10, 111, 10,
			112, 10, 114, 10, 2, 97, 10, 101, 10, 102,
			10, 106, 10, 2, 93, 10, 94, 10, 95, 10,
			96, 10, 2, 87, 10, 89, 10, 90, 10, 91,
			10, 2, 74, 10, 75, 10, 78, 10, 83, 10,
			2, 70, 10, 71, 10, 72, 10, 73, 10, 2,
			63, 10, 65, 10, 66, 10, 68, 10, 2, 58,
			10, 60, 10, 61, 10, 62, 10, 2, 54, 10,
			55, 10, 56, 10, 57, 10, 2, 50, 10, 51,
			10, 52, 10, 53, 10, 2, 43, 10, 44, 10,
			45, 10, 46, 10, 2, 38, 10, 39, 10, 41,
			10, 42, 10, 2, 33, 10, 34, 10, 35, 10,
			36, 10, 3, 251, 11, 252, 11, 253, 11, 254,
			11, 27, 10, 27, 10, 28, 10, 28, 10, 3,
			242, 11, 243, 11, 244, 11, 245, 11, 246, 11,
			247, 11, 249, 11, 250, 11, 3, 233, 11, 234,
			11, 235, 11, 236, 11, 237, 11, 238, 11, 239,
			11, 241, 11, 3, 222, 11, 223, 11, 225, 11,
			227, 11, 228, 11, 229, 11, 230, 11, 231, 11,
			3, 214, 11, 215, 11, 216, 11, 217, 11, 218,
			11, 219, 11, 220, 11, 221, 11, 3, 205, 11,
			207, 11, 208, 11, 209, 11, 210, 11, 211, 11,
			212, 11, 213, 11, 3, 197, 11, 198, 11, 199,
			11, 200, 11, 201, 11, 202, 11, 203, 11, 204,
			11, 3, 187, 11, 188, 11, 189, 11, 190, 11,
			191, 11, 193, 11, 195, 11, 196, 11, 3, 178,
			11, 179, 11, 180, 11, 181, 11, 182, 11, 183,
			11, 185, 11, 186, 11, 3, 169, 11, 170, 11,
			171, 11, 172, 11, 173, 11, 174, 11, 175, 11,
			177, 11, 3, 159, 11, 161, 11, 163, 11, 164,
			11, 165, 11, 166, 11, 167, 11, 168, 11, 3,
			146, 11, 148, 11, 153, 11, 154, 11, 155, 11,
			156, 11, 157, 11, 158, 11, 3, 134, 11, 135,
			11, 136, 11, 139, 11, 140, 11, 141, 11, 142,
			11, 145, 11, 3, 47, 11, 79, 11, 84, 11,
			92, 11, 113, 11, 123, 11, 132, 11, 133, 11
		};

		// Token: 0x04005984 RID: 22916
		private static readonly uint[] BitMasks = new uint[]
		{
			0U, 1U, 3U, 7U, 15U, 31U, 63U, 127U, 255U, 511U,
			1023U, 2047U, 4095U, 8191U, 16383U, 32767U
		};

		// Token: 0x04005985 RID: 22917
		private static readonly uint[] CompressionTable = new uint[]
		{
			2147549184U, 1879310336U, 1543897088U, 1040646144U, 1074200576U, 1611005952U, 1107755008U, 1141309440U, 1174863872U, 805830656U,
			1208418304U, 822607872U, 839385088U, 1241972736U, 587727104U, 856162304U, 872939520U, 889716736U, 1275527168U, 1678114816U,
			1745223680U, 1309081600U, 906493952U, 923271168U, 940048384U, 587727105U, 604504320U, 218563334U, 218563335U, 956825600U,
			1342636032U, 973602816U, 990380032U, 235405824U, 235405825U, 235405826U, 235405827U, 604504321U, 252183040U, 252183041U,
			621281536U, 252183042U, 252183043U, 268960256U, 268960257U, 268960258U, 268960259U, 525056U, 621281537U, 638058752U,
			285737472U, 285737473U, 285737474U, 285737475U, 302514688U, 302514689U, 302514690U, 302514691U, 319291904U, 638058753U,
			319291905U, 319291906U, 319291907U, 336069120U, 654835968U, 336069121U, 336069122U, 654835969U, 336069123U, 671613184U,
			352846336U, 352846337U, 352846338U, 352846339U, 369623552U, 369623553U, 671613185U, 688390400U, 369623554U, 525057U,
			688390401U, 1007157248U, 705167616U, 369623555U, 525058U, 705167617U, 721944832U, 386400768U, 721944833U, 386400769U,
			386400770U, 386400771U, 525059U, 403177984U, 403177985U, 403177986U, 403177987U, 419955200U, 738722048U, 738722049U,
			755499264U, 419955201U, 419955202U, 1376190464U, 1409744896U, 1443299328U, 419955203U, 755499265U, 1023934464U, 1476853760U,
			436732416U, 436732417U, 436732418U, 525060U, 436732419U, 453509632U, 453509633U, 453509634U, 453509635U, 470286848U,
			470286849U, 470286850U, 470286851U, 525061U, 487064064U, 487064065U, 487064066U, 487064067U, 1510408192U, 503841280U,
			503841281U, 503841282U, 525062U, 525063U, 17302272U, 17302273U, 17302274U, 503841283U, 520618496U, 17302275U,
			17302276U, 17302277U, 17302278U, 520618497U, 772276480U, 17302279U, 34079488U, 520618498U, 34079489U, 772276481U,
			789053696U, 789053697U, 520618499U, 34079490U, 34079491U, 34079492U, 34079493U, 34079494U, 34079495U, 50856704U,
			537395712U, 50856705U, 537395713U, 50856706U, 50856707U, 50856708U, 50856709U, 50856710U, 50856711U, 67633920U,
			67633921U, 67633922U, 67633923U, 67633924U, 67633925U, 67633926U, 537395714U, 67633927U, 84411136U, 84411137U,
			84411138U, 84411139U, 84411140U, 84411141U, 537395715U, 84411142U, 84411143U, 101188352U, 101188353U, 101188354U,
			101188355U, 101188356U, 554172928U, 101188357U, 554172929U, 101188358U, 101188359U, 117965568U, 117965569U, 117965570U,
			117965571U, 117965572U, 117965573U, 117965574U, 117965575U, 134742784U, 554172930U, 134742785U, 134742786U, 134742787U,
			134742788U, 134742789U, 134742790U, 134742791U, 151520000U, 151520001U, 151520002U, 151520003U, 151520004U, 151520005U,
			151520006U, 151520007U, 168297216U, 168297217U, 554172931U, 168297218U, 570950144U, 168297219U, 168297220U, 168297221U,
			168297222U, 168297223U, 570950145U, 185074432U, 185074433U, 185074434U, 185074435U, 185074436U, 185074437U, 185074438U,
			570950146U, 185074439U, 201851648U, 201851649U, 201851650U, 201851651U, 201851652U, 201851653U, 570950147U, 201851654U,
			201851655U, 218628864U, 218628865U, 218628866U, 218628867U, 1812332544U
		};
	}
}
